   // Initialize the board array with null values based on the selected matrix size
/* let lines1=[[]];

            for (let i = 0; i < 1 ; i++) {
                let a =[[]];
                let b =[[]];
                let c=[[]];
    for (let j = 0; j < 1 ; j++) {
        if(a[i][j] && b[i+1][j] && c[i+2][j])
                    {
                         lines1.push([a[i][j], a[i+1][j], a[i+2][j]]);

                    }
 if(a[i][j] && b[i][j+1] && c[i][j+2])
                    {
                          lines1.push([a[i][j], a[i][j+1], a[i][j+2]]);

                    }
 if(a[i][j] && b[i][j+1] && c[i][j+2])
{

     lines1.push([a[i][j], a[i+1][j+1], a[i+1][j+2]]);
}}

console.log(lines1);
            }


 /*           for (let i = 0; i < numRows; i++) {
    for (let j = 0; j < numCols; j++) {
        // Access the value at the current indices
        const value = matrixValues[i * numCols + j];
        
        // Check if the current indices match the specified ones
        if ((i === 0 && j === 0) || (i === 0 && j === 1) || (i === 0 && j === 3) ||
            (i === 4 && j === 4)) {
            // Process the value (e.g., print it to the console)
            console.log(`Value at row ${i}, column ${j}: ${value}`);
        }
    }
*/
//let [a, b, c] = lines1[i][j];

                                                             /*let a = [
    [ 0, 1, 2,3,4],
    [ 5,6,7,8,9],
    [10,11,12,13,14],
[15,16,17,18,19],
[20,21,22,23,24],
];                  */


/*function isValidCell(array, row, col) {
    // Check if the row index is within bounds
    if (row < 0 || row >= array.length) {
        return false;
    }
    if (array[row][col] == undefined)
    {return false;
    }
    // Check if the column index is within bounds
    if (col < 0 || col >= array[row].length) {
        return false;
    }
    
    // If both row and column indices are within bounds, return true
    return true;
}


for (let i = 0; i < 3; i++) {
  
  for (let j = 0; j < 3; j++) {
     
          if(  j<1)
          {
              lines1.push([a[i][j], a[i][j + 1], a[i][j + 2]]);
          }
          if(  i<1)
          {
            lines1.push([a[i][j], a[i+1][j] , a[i+2][j]]);
           
          }
          //for left digonal
          if(i < 1 && j  <1)
          {lines1.push([a[i][j], a[i+1][j+1] , a[i+2][j+2]]);
          }
          //for right diagonal
          if(i > 2 && j > 2)
          {
          if (isValidIndex(a, i, j) && isValidIndex(a, i + 1, j+1) && isValidIndex(a, i + 2, j+2))
          {
            lines1.push([a[i][j], a[i+2][j+2] , a[i+4][j+4]]);
          }}
          lines1 = lines1.filter(arr => arr.length > 0);

  }
}*/
  
function checkWinner57() {
    //However, it's important to note that since arrays in JavaScript are reference types,
// modifying lines or lines1 will affect the other. If you want to make a copy of lines1const lines = [...lines1];
// const lines = lines1;
let result = '';
lines=getlines(a);
let winsX = 0;

let winsO =0;
// Iterate through rows
for (let i = 0; i < lines.length; i++) {
const [a, b, c] = lines[i];

if (board[a] && board[b] && board[c]) {
 
   // Check if all cells in the line are filled
   if (board[a] === "O" && board[a] === board[b] && board[a] === board[c]) {
       // If all cells have the same value (X or O), increment the respective counter
         winsX++;
        console.log('aaa');
         
       } 
       
       else if  (board[a] === "O" && board[a] === board[b] && board[a] === board[c] ) {
       // If all cells have the same value (X or O), increment the respective counter
         winsO++;
         
       
       } 
   }
  
           }  

// Check if the game is a draw
let isDraw = true;
for (let i = 0; i < board.length; i++) {
   if (!board[i]) {
       isDraw = false;
       break;
   }
}



 
if (isDraw && winsX === 0 && winsO === 0) {
   result = 'draw';
   
console.log('Drawing');
 
} else {
   result = { winsX, winsO };
   console.log('X Wins:', winsX);
   console.log('O Wins:', winsO);

}
console.log(result);
return result; 


             }      */
function printBoard() {
       const table = document.getElementById('board');
       const matrixSize2 = parseInt(matrixSize);
      
       const m2322 = matrixSize2 * matrixSize2;
       for (let i = 0; i < m2322; i++) {
           const row = Math.floor(i / matrixSize2 );
           const col = i % matrixSize2 ;
           table.rows[row].cells[col].textContent = board[i];      }  }

/*
           let lines1 = [[]];
           for (let i = 0; i < 3; i++) {
/* Iterate through columns
for (let j = 0; j < 3; j++) {
   // Check horizontal winning combinations
   if (j < 1) {
       lines1.push(i * 3 + j);
   }
   
   // Check vertical winning combinations
   if (i <= 1) {
       lines1.push(i * 3 + j);
   }

   // Check diagonal winning combinations
   if (i <= 1 && j <= 1) {
       // Main diagonal
       lines1.push([a[i][j], b[i+1][j+1], c[i+2][j+2]]);
       // Anti-diagonal
       lines1.push([a[i][j+2], b[i+1][j+1], c[i+2][j]]);
   }
}
}

console.log(lines1);



function checkin(winner) {
if (winner === 'draw') {
   console.log('The game ended in a draw!');
} else {
   // Print the scores
   console.log('X Wins:', winner.winsX);
   console.log('O Wins:', winner.winsO);

}

// Continue the game
console.log('Continue playing...');
}
*/
/* Define the sequences of player symbols for 2 players and 3 players
const sequences = {
2: ['X', 'O'],
3: ['X', 'O', 'Y']
};
*/
/*
// Get the number of players from somewhere (e.g., localStorage)
let numPlayers = parseInt(localStorage.getItem('numPlayers'));

// Get the selected icon from somewhere (e.g., localStorage)
let selectedIcon = localStorage.getItem('selectedIcon');

// Get the sequence of player symbols based on the number of players
let sequence = sequences[numPlayers];

// If the selected icon is found in the sequence, set it as the starting symbol
if (sequence.includes(selectedIcon)) {
sequence = sequence.slice(sequence.indexOf(selectedIcon)).concat(sequence.slice(0, sequence.indexOf(selectedIcon)));
}

// Toggle between player symbols
let currentPlayerIndex = 0; // Start with the first player in the sequence

// Toggle to the next player
currentPlayerIndex = (currentPlayerIndex + 1) % sequence.length;

// Get the symbol of the next player
let nextPlayerSymbol = sequence[currentPlayerIndex];

Store the symbol of the next player for the next turn
We define an object sequences to store the sequences of player symbols for 2 players and 3 players.
We retrieve the number of players and the selected icon from localStorage.
Based on the number of players, we select the corresponding sequence of player symbols.
If the selected icon is found in the sequence, we rearrange the sequence so that the 
selected icon becomes the starting symbol.
We toggle between player symbols by incrementing the index and using the modulo operator to 
wrap around if necessary.
We get the symbol of the next player and store it for the next turn.

localStorage.setItem('currentPlayerSymbol', nextPlayerSymbol);
*/
// let turn = localStorage.getItem('selectedIcon');















